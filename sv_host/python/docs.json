{
  "modules": [
    {
      "name": "control",
      "methods": [
        {
          "name": "init_motor()",
          "description": "조향모터, 구동모터를 초기화 합니다 *초기화 없이 set_motor 사용이 가 합니다",
          "parameters": [],
          "return": null
        },
        {
          "name": "stop_motor()",
          "description": "조향모터, 구동모터의 속도 제어를 중지 합니다",
          "parameters": [],
          "return": null
        },
        {
          "name": "set_motor(int left, int right ,int speed)",
          "description": "조향모터, 구동모터의 제어값을 설정 합니다",
          "parameters": [
            {
              "name": "left",
              "type": "int",
              "description": "왼쪽 바퀴의 회전각으로  0±10 의 값을 가지고 있습니다, 실제 각도는 ±20도 입니다"
            },
            {
              "name": "right",
              "type": "int",
              "description": "오른쪽 바퀴의 회전각으로  0±10 의 값을 가지고 있습니다, 실제 각도는 ±20도 입니다"
            },
            {
              "name": "speed",
              "type": "int",
              "description": "구동모터의 속도 값으로 ±30 입니다 단위는 rad/s입니다"
            }
          ],
          "return": null
        }
      ]
    },
    {
      "name": "camera",
      "methods": [
        {
          "name": "get_image(location='center')",
          "description": "RGB 이미지를 받아옵니다",
          "parameters": [
            {
              "name": "location",
              "type": "string",
              "description": "기본 값은 'center' 로 'left' , 'right' , 'center' 에 따라 다른 카메라의 이미지를 받아오는 함수 입니다"
            }
          ],
          "return": [{
            "name": "image",
            "type": "numpy.ndarray",
            "description": "이미지가 리턴됩니다"
          }]
        },
        {
          "name": "get_depth()",
          "description": "DEPTH 이미지를 받아옵니다",
          "parameters": [],
          "return": [{
            "name": "depth",
            "type": "numpy.ndarray",
            "description": "이미지가 리턴됩니다"
          }]
        },
        {
          "name": "gridFront(img, cols=7, rows=3, update_img=False)",
          "description": "이미지를 받아 격자를 생성합니다",
          "parameters": [
            {
              "name": "img",
              "type": "numpy.ndarray",
              "description": "격자를 생성할 이미지 입니다"
            },
            {
              "name": "cols",
              "type": "int",
              "description": "격자의 세로선 갯수 입니다"
            },
            {
              "name": "rows",
              "type": "int",
              "description": "격자의 가로선 갯수 입니다"
            },
            {
              "name": "update_img",
              "type": "bool",
              "description": "리턴 이미지 이외에도 받은 이미지에도 격자를 그릴지 결정합니다"
            }
          ],
          "return": [
          {
            "name": "grid",
            "type": "numpy.ndarray",
            "description": "격자가 생성된 이미지"
          },
          {
            "name": "(V, L, R)",
            "type": "tuple",
            "description": "격자의 위치 값"
          }
        ]
        },
        {
          "name": "show_image(frame,window_name='center',quality=20):",
          "description": "이미지를 컴퓨터 화면으로 전송합니다",
          "parameters": [
            {
              "name": "frame",
              "type": "numpy.ndarray",
              "description": "전송할 이미지를 매개변수로 받습니다"
            },
            {
              "name": "window_name",
              "type": "string",
              "description": "이미지를 전송할 윈도우의 이름입니다 'left','right','center','depth' 중 선택할 수 있습니다"
            },
            {
              "name": "quality",
              "type": "int",
              "description": "전송할 이미지의 품질 입니다 기본값은 20으로 낮을수록 품질이 낮아지고 전송속도가 증가합니다"
            }
          ],
          "return": null
        }
      ]
    },
    {
      "name": "lidar",
      "methods": [
        {
          "name": "get_lidar()",
          "description": "라이다 데이터를 받아옵니다",
          "parameters": [],
          "return": [
            {
            "name" : "theta_array",
            "type": "numpy.ndarray",
            "description": "각도 배열"
            },
            {
            "name" : "dist_array",
            "type": "numpy.ndarray",
            "description": "거리 배열"
            }    
          ]
        },
        {
          "name": "show_lidar(numpy.ndarray theta_array, numpy.ndarray dist_array)",
          "description": "각도배열 , 거리배열을 입력하면 라이다 이미지를 보여줍니다",
          "parameters": [
            {
              "name": "theta_array",
              "type": "numpy.ndarray",
              "description": "각도 배열"
            },
            {
              "name": "dist_array",
              "type": "numpy.ndarray",
              "description": "거리 배열"
            }
          ]
        }
      ]
    },
    {
      "name": "ai",
      "methods": [
        {
          "name": "get_model(name)",
          "description": "저장한 ai모델을 가져옵니다",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "저장한 인공지능 모델의 이름을 입력해야 합니다"
            }
          ],
          "return": [{
            "name": "model",
            "type": "torch.nn.Module",
            "description": "인공지능 모델이 리턴됩니다"
          }]
        },
        {
          "name": "get_model_input(name)",
          "description": "입력한 이름을 가진 모델에 필요한 input 크기를 출력합니다",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "저장한 인공지능 모델의 이름을 입력해야 합니다"
            }
          ],
          "return": null
        },
        {
          "name": "get_model_output(input,name)",
          "description": "모델에 입력값을 넣으면 연산값을 출력합니다",
          "parameters": [
            {
              "name": "input",
              "type": "numpy.ndarray",
              "description": "모델의 입력값을 넘깁니다"
            },
            {
              "name": "name",
              "type": "string",
              "description": "저장한 인공지능 모델의 이름을 입력해야 합니다"
            }
          ],
          "return": [
            {
            "name" : "output",
            "type": "any",
            "description": "모델에 따라 다른 출력값을 가집니다"
            } 
          ]
        }
      ]
    }
  ]
}
